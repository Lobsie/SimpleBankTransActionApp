// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleBankTansactionApp.Infrastructure.Data;

#nullable disable

namespace SimpleBankTansactionApp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231026215025_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SimpleBankTransactionApp.Core.Entities.BankAccounts.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("SimpleBankTransactionApp.Core.Entities.BankTransactions.BankTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("IncomingBankAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OutgoingBankAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IncomingBankAccountId");

                    b.HasIndex("OutgoingBankAccountId");

                    b.ToTable("BankTransactions");
                });

            modelBuilder.Entity("SimpleBankTransactionApp.Core.Entities.Clients.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("SimpleBankTransactionApp.Core.Entities.BankAccounts.BankAccount", b =>
                {
                    b.HasOne("SimpleBankTransactionApp.Core.Entities.Clients.Client", "Client")
                        .WithMany("BankAccounts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("SimpleBankTransactionApp.Core.Entities.BankTransactions.BankTransaction", b =>
                {
                    b.HasOne("SimpleBankTransactionApp.Core.Entities.BankAccounts.BankAccount", "IncomingBankAccount")
                        .WithMany("IncomingBankTransactions")
                        .HasForeignKey("IncomingBankAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SimpleBankTransactionApp.Core.Entities.BankAccounts.BankAccount", "OutgoingBankAccount")
                        .WithMany("OutgoingBankTransactions")
                        .HasForeignKey("OutgoingBankAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("IncomingBankAccount");

                    b.Navigation("OutgoingBankAccount");
                });

            modelBuilder.Entity("SimpleBankTransactionApp.Core.Entities.BankAccounts.BankAccount", b =>
                {
                    b.Navigation("IncomingBankTransactions");

                    b.Navigation("OutgoingBankTransactions");
                });

            modelBuilder.Entity("SimpleBankTransactionApp.Core.Entities.Clients.Client", b =>
                {
                    b.Navigation("BankAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
